AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Create bingo state machine and functions for each step

Parameters:
    TwitterConsumerKey: 
      Description: Twitter app consumer key
      Type: String
      NoEcho: true
      Default: ''

    TwitterConsumerSecret: 
      Description: Twitter app consumer secret
      Type: String
      NoEcho: true
      Default: ''

    TwitterAppSecret: 
      Description: Twitter app secret
      Type: String
      NoEcho: true
      Default: ''

    TwitterAppToken: 
      Description: Twitter app token
      Type: String 
      NoEcho: true
      Default: ''
Resources:

  BingoStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/bingo.asl.json
      DefinitionSubstitutions:
        PostBingoBannerFunctionArn: !GetAtt PostBingoBannerFunction.Arn
        FindPlayersFunctionArn: !GetAtt FindPlayersFunction.Arn
        CreateTicketFunctionArn: !GetAtt CreateTicketFunction.Arn
        NumbersDrawFunctionArn: !GetAtt NumbersDrawFunction.Arn
        FindWinnerFunctionArn: !GetAtt FindWinnerFunction.Arn
        NotifyWinnerFunctionArn: !GetAtt NotifyWinnerFunction.Arn
        DestroyMessagesFunctionArn: !GetAtt DestroyMessagesFunction.Arn
        SendErrorMessageFunctionArn: !GetAtt SendErrorMessageFunction.Arn
        BingoMessagesQueueFIFOUrl: !Ref BingoMessagesQueueFIFO
        BingoWebSocketNotificationArn: !Ref BingoWebSocketNotification
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref PostBingoBannerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref FindPlayersFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateTicketFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref NumbersDrawFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref FindWinnerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref NotifyWinnerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref NotifyWinnerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendErrorMessageFunction
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BingoMessagesQueueFIFO.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt BingoWebSocketNotification.TopicName

  PostBingoBannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/BingoBanner/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  FindPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/FindPlayers/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  CreateTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/CreateTicket/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  NumbersDrawFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/NumbersDraw/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  FindWinnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/FindWinner/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  NotifyWinnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/NotifyWinner/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  SendErrorMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/SendErrorMessage/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  DestroyMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/DestroyMessages/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 120
      MemorySize: 128
      Environment:
        Variables:
          CONSUMER_KEY: !Ref TwitterConsumerKey
          CONSUMER_SECRET: !Ref TwitterConsumerSecret
          SECRET: !Ref TwitterAppSecret
          TOKEN: !Ref TwitterAppToken

  WSSOnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/BingoWSS/app.ondisconnect_handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 10
      MemorySize: 128

  WSSOnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/functions/BingoWSS/app.onconnect_handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 10
      MemorySize: 128

  WSSSendMessageFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - BingoWebSocket
    Properties:
      CodeUri: .
      Handler: src/functions/WSSSendMessage/app.handler
      Runtime: nodejs14.x
      PackageType: Zip
      Timeout: 60
      MemorySize: 128
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BingoWebSocket}/*'
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref BingoWebSocketNotification
      Environment:
        Variables:
          TABLE_NAME: !Ref BingoTicketTable
          WEBSOCKET_DOMAN: !GetAtt BingoWebSocket.DomainName.RegionalDomainName

  BingoTicketTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: BingoExecutionName
          AttributeType: "S"
        - 
          AttributeName: PlayerId
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: BingoExecutionName
          KeyType: "HASH"
        - 
          AttributeName: PlayerId
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 
      TableName: BingoTicket
      Tags:
        - Key: Project
          Value: sam-bingo-app

  BingoMessagesQueueFIFO:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: BingoMessages.fifo
      FifoQueue:  true
      ContentBasedDeduplication: true
      Tags:
        - Key: project
          Value: sam-bingo-app

  BingoWebSocketNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: BingoWebSocketNotification
      TopicName: BingoWebSocketNotification

  CreateTicketTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: CreateTicketFunction
      Destination:
        Id: BingoTicketTable
      Permissions:
        - Write
        - Read

  FindWinnerTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: FindWinnerFunction
      Destination:
        Id: BingoTicketTable
      Permissions:
        - Read

  WSSOnDisconnectFunctionTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: WSSOnDisconnectFunction
      Destination:
        Id: BingoTicketTable
      Permissions:
        - Read
        - Write

  WSSOnConnectFunctionTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: WSSOnConnectFunction
      Destination:
        Id: BingoTicketTable
      Permissions:
        - Write

  WSSOnDisconnectFunctionTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: WSSOnDisconnectFunction
      Destination:
        Id: BingoTicketTable
      Permissions:
        - Read
        - Write

  WSSSendMessageFunctionTableConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: WSSSendMessageFunction
      Destination:
        Id: BingoTicketTable
      Permissions:
        - Read
        - Write

# https://gist.github.com/maatthc/9d2dfe0448733f0ee1624d658fbac80f
# https://github.com/aws-samples/simple-websockets-chat-app/blob/master/template.yaml
  BingoWebSocket:
    Type:  AWS::ApiGatewayV2::Api
    Properties:
      Name: BingoWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      Description: "Bingo web socket for players communication."
  
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BingoWebSocket
      RouteKey: $connect
      RouteResponseSelectionExpression: $default
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectionRouteIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BingoWebSocket
      RouteKey: $disconnect
      RouteResponseSelectionExpression: $default
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectionRouteIntegration
  
  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BingoWebSocket
      RouteKey: sendMessage
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: SendMessage
      Target: !Join 
        - '/'
        - - 'integrations'
          - !Ref SendMessageRouteIntegration

  DefaultRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref BingoWebSocket
        RouteKey: $default
        RouteResponseSelectionExpression: '$default'
        AuthorizationType: NONE
        OperationName: DefaultRoute
        Target: !Join
          - '/'
          - - 'integrations'
            - !Ref DefaultIntegration
  
  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BingoWebSocket
      Description: Default Integration
      IntegrationType: MOCK
      RequestTemplates: 
        "200" : '{"statusCode" : 200}'
      TemplateSelectionExpression: '200'

  DefaultIntegrationRespponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref BingoWebSocket
      IntegrationId: !Ref DefaultIntegration
      IntegrationResponseKey: $default
      ResponseTemplates: 
        "200" : '{"statusCode" : 200, "connectionId" : "$context.connectionId"}'
      TemplateSelectionExpression: '200'
  
  DefaultRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId: !Ref DefaultRoute
      ApiId: !Ref BingoWebSocket
      RouteResponseKey: $default

  ConnectionRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BingoWebSocket
      Description: Connect route integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSSOnConnectFunction.Arn}/invocations

  DisconnectionRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BingoWebSocket
      Description: Disconnect route integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSSOnDisconnectFunction.Arn}/invocations

  SendMessageRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BingoWebSocket
      Description: Route to send messages to/from clients
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSSSendMessageFunction.Arn}/invocations

  WSSOnConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - BingoWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSSOnConnectFunction
      Principal: apigateway.amazonaws.com

  WSSOnDisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - BingoWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSSOnDisconnectFunction
      Principal: apigateway.amazonaws.com

  WSSSendMessageFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - BingoWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSSSendMessageFunction
      Principal: apigateway.amazonaws.com

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref BingoWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      Description: Development stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref BingoWebSocket
