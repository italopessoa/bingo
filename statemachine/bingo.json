{
    "Comment": "Bau da felicidade",
    "StartAt": "Post bingo description",
    "States": {
      "Post bingo description": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload": {
            "ExecutionName.$": "$$.Execution.Name",
            "StartTime.$": "$$.Execution.StartTime",
            "Comment.$": "$$.Execution.Input.Comment"
          },
          "FunctionName": "${PostBingoBannerFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Wait for players subscription",
        "OutputPath": "$.state",
        "ResultSelector": {
          "state.$": "$.Payload"
        }
      },
      "Wait for players subscription": {
        "Type": "Wait",
        "Seconds": 30,
        "Next": "Register players"
      },
      "Register players": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${FindPlayersFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Create tickets",
        "OutputPath": "$.state",
        "ResultSelector": {
          "state.$": "$.Payload"
        }
      },
      "Create tickets": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${CreateTicketFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "TimeoutSeconds": 15,
        "Next": "Is is time to draw the numbers?",
        "OutputPath": "$.state",
        "ResultSelector": {
          "state.$": "$.Payload"
        }
      },
      "Is is time to draw the numbers?": {
        "Type": "Choice",
        "Choices": [
          {
            "And": [
              {
                "Variable": "$.currentTimeISO",
                "TimestampGreaterThanPath": "$.bingoStartTimeISO"
              }
            ],
            "Next": "Draw a number"
          }
        ],
        "Default": "Wait for players subscription"
      },
      "Draw a number": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${NumbersDrawFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Any number available?",
        "OutputPath": "$.state",
        "ResultSelector": {
          "state.$": "$.Payload"
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Comment": "deu ruim",
            "Next": "Process pulished messages",
            "ResultPath": "$.error"
          }
        ]
      },
      "Any number available?": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.count",
            "NumericEquals": 24,
            "Next": "Process pulished messages"
          }
        ],
        "Default": "Wait for player to check their tickets"
      },
      "Wait for player to check their tickets": {
        "Type": "Wait",
        "Seconds": 15,
        "Next": "Try to find a winner"
      },
      "Try to find a winner": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${FindWinnerFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Any winner?",
        "OutputPath": "$.state",
        "ResultSelector": {
          "state.$": "$.Payload"
        }
      },
      "Any winner?": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.hasWinner",
            "BooleanEquals": true,
            "Next": "Notify winner"
          }
        ],
        "Default": "Draw a number"
      },
      "Notify winner": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${NotifyWinnerFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "OutputPath": "$.state",
        "ResultSelector": {
          "state.$": "$.Payload"
        },
        "Next": "Process pulished messages"
      },
      "Process pulished messages": {
        "Type": "Map",
        "Iterator": {
          "StartAt": "Save Twitter messages for processing",
          "States": {
            "Save Twitter messages for processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sqs:sendMessage",
              "Parameters": {
                "MessageBody.$": "$",
                "QueueUrl": "${BingoMessagesQueueFIFOUrl}",
                "MessageGroupId": "samp-bingo-app-tweets"
              },
              "End": true
            }
          }
        },
        "End": true,
        "ItemsPath": "$.publishedMessages"
      }
    }
  }