{
    "Comment": "Bau da felicidade",
    "StartAt": "Post bingo description",
    "States": {
      "Post bingo description": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$": "$",
          "FunctionName": "${PostBingoBannerFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Wait for players subscription",
        "ResultSelector": {
          "state.$": "$.Payload",
          "nextStep": "findUsers"
        }
      },
      "Wait for players subscription": {
        "Type": "Wait",
        "Seconds": 15,
        "Next": "Register players"
      },
      "Register players": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${FindPlayersFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Pass (1)",
        "ResultSelector": {
          "state.$": "$.Payload",
          "nextStep": "createCards"
        }
      },
      "Pass (1)": {
        "Type": "Pass",
        "Next": "Create tickets"
      },
      "Create tickets": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${CreateTicketFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "TimeoutSeconds": 15,
        "Next": "Wait for more players before start time",
        "ResultSelector": {
          "state.$": "$.Payload",
          "nextStep": "findUsers"
        }
      },
      "Wait for more players before start time": {
        "Type": "Choice",
        "Choices": [
          {
            "And": [
              {
                "Variable": "$.state.current_time_z",
                "TimestampGreaterThanPath": "$.state.start_time_z"
              }
            ],
            "Next": "Pass"
          }
        ],
        "Default": "Wait for players subscription"
      },
      "Pass": {
        "Type": "Pass",
        "Next": "Numbers draw",
        "Result": "callBall",
        "ResultPath": "$.nextStep"
      },
      "Numbers draw": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${NumbersDrawFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Any number available?",
        "ResultSelector": {
          "state.$": "$.Payload",
          "nextStep": "checkWinner"
        }
      },
      "Any number available?": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.state.count",
            "NumericEquals": 24,
            "Next": "Pass (2)"
          }
        ],
        "Default": "Pass (3)"
      },
      "Pass (2)": {
        "Type": "Pass",
        "Next": "Destroy messages",
        "Result": "finish",
        "ResultPath": "$.nextStep"
      },
      "Pass (3)": {
        "Type": "Pass",
        "Next": "Wait for player to check their tickets",
        "ResultPath": "$.nextStep",
        "Result": "checkWinner"
      },
      "Wait for player to check their tickets": {
        "Type": "Wait",
        "Seconds": 15,
        "Next": "Try to find a winner"
      },
      "Try to find a winner": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${FindWinnerFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Any winner?",
        "ResultSelector": {
          "state.$": "$.Payload",
          "nextStep": "callBall"
        }
      },
      "Any winner?": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.state.hasWinner",
            "BooleanEquals": true,
            "Next": "Pass (4)"
          }
        ],
        "Default": "Numbers draw"
      },
      "Pass (4)": {
        "Type": "Pass",
        "Next": "Notify winner",
        "ResultPath": "$.nextStep",
        "Result": "notifyWinners"
      },
      "Notify winner": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${NotifyWinnerFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "ResultSelector": {
          "state.$": "$.Payload",
          "nextStep": "finish"
        },
        "Next": "Destroy messages"
      },
      "Destroy messages": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "Payload.$":"$",
          "FunctionName":"${DestroyMessagesFunctionArn}"
        },
        "OutputPath": "$.Payload",
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "End": true
      }
    }
  }